geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA), selected = "Buenos Aires")
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" ),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" ),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ]
comunaPred <- comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ]
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" ),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunas <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
coms <- comunaPred
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
coms <- comunaPred
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shinycssloaders)
install.packages("shinycssloaders")
library(shinycssloaders)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
coms <- comunaPred
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
coms$COMUNA)
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
coms <- comunaPred
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
coms <- comunaPred
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunas <- reactive({
comunaPred <- comuna2018("MES",99)
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
