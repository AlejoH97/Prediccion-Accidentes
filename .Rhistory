comunasPDay <- reactive({
comunaPDay <- comunaPDay[(comunaPDay$COMUNA == input$selectComuna), ]
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA >= input$fInicio),  ])
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA <= input$fFin),  ])
})
output$distPlotDay <- renderPlot({
ggplot(data=comunasPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Día")+
ylab("Accidentes")
})
################# Barrio
#MES
barrioPred <- barrio2018("MES",99)
barrios <- reactive({
barrioPred <- barrioPred[(barrioPred$BARRIO == input$selectBarrio), ]
barrioPred <- na.omit(barrioPred[(barrioPred$MES >= format(input$fInicio, format="%m")),  ])
barrioPred <- na.omit(barrioPred[(barrioPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlotB <- renderPlot({
ggplot(data=barrios(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Comuna')",
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Semana') && (input.grupo == 'Comuna')",
plotOutput("distPlotWeek") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Día') && (input.grupo == 'Comuna')",
plotOutput("distPlotDay") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Barrio')",
plotOutput("distPlotBMes") %>% withSpinner(color="#0dc5c1")
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
###################### Comuna
#MES
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$distPlot <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
#Semana
comunaPWeek <- comuna2018("SEMANA",99)
comunasWeek <- reactive({
comunaPWeek <- comunaPWeek[(comunaPWeek$COMUNA == input$selectComuna), ]
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA >= format(input$fInicio, format="%W")),  ])
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA <= format(input$fFin, format="%W")),  ])
})
output$distPlotWeek <- renderPlot({
ggplot(data=comunasWeek(), aes(x=SEMANA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Semana")+
ylab("Accidentes")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
#DIA
comunaPDay <- comuna2018("DIA",99)
comunasPDay <- reactive({
comunaPDay <- comunaPDay[(comunaPDay$COMUNA == input$selectComuna), ]
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA >= input$fInicio),  ])
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA <= input$fFin),  ])
})
output$distPlotDay <- renderPlot({
ggplot(data=comunasPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Día")+
ylab("Accidentes")
})
################# Barrio
#MES
output$distPlotBMes <- renderPlot({
barrioPred <- barrio2018("MES",99)
barrios <- reactive({
barrioPred <- barrioPred[(barrioPred$BARRIO == input$selectBarrio), ]
barrioPred <- na.omit(barrioPred[(barrioPred$MES >= format(input$fInicio, format="%m")),  ])
barrioPred <- na.omit(barrioPred[(barrioPred$MES <= format(input$fFin, format="%m")),  ])
})
ggplot(data=barrios(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Comuna')",
plotOutput("distPlot") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Semana') && (input.grupo == 'Comuna')",
plotOutput("distPlotWeek") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Día') && (input.grupo == 'Comuna')",
plotOutput("distPlotDay") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Barrio')",
plotOutput("distPlotBMes") %>% withSpinner(color="#0dc5c1")
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
###################### Comuna
#MES
output$distPlot <- renderPlot({
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
#Semana
output$distPlotWeek <- renderPlot({
comunaPWeek <- comuna2018("SEMANA",99)
comunasWeek <- reactive({
comunaPWeek <- comunaPWeek[(comunaPWeek$COMUNA == input$selectComuna), ]
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA >= format(input$fInicio, format="%W")),  ])
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA <= format(input$fFin, format="%W")),  ])
})
ggplot(data=comunasWeek(), aes(x=SEMANA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Semana")+
ylab("Accidentes")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
#DIA
output$distPlotDay <- renderPlot({
comunaPDay <- comuna2018("DIA",99)
comunasPDay <- reactive({
comunaPDay <- comunaPDay[(comunaPDay$COMUNA == input$selectComuna), ]
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA >= input$fInicio),  ])
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA <= input$fFin),  ])
})
ggplot(data=comunasPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Día")+
ylab("Accidentes")
})
################# Barrio
#MES
output$distPlotBMes <- renderPlot({
barrioPred <- barrio2018("MES",99)
barrios <- reactive({
barrioPred <- barrioPred[(barrioPred$BARRIO == input$selectBarrio), ]
barrioPred <- na.omit(barrioPred[(barrioPred$MES >= format(input$fInicio, format="%m")),  ])
barrioPred <- na.omit(barrioPred[(barrioPred$MES <= format(input$fFin, format="%m")),  ])
})
ggplot(data=barrios(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Comuna')",
plotOutput("plotCMes") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Semana') && (input.grupo == 'Comuna')",
plotOutput("plotCSemana") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Día') && (input.grupo == 'Comuna')",
plotOutput("plotCDia") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Barrio')",
plotOutput("plotBMes") %>% withSpinner(color="#0dc5c1")
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
###################### Comuna
#MES
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$plotCMes <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
#Semana
comunaPWeek <- comuna2018("SEMANA",99)
comunasWeek <- reactive({
comunaPWeek <- comunaPWeek[(comunaPWeek$COMUNA == input$selectComuna), ]
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA >= format(input$fInicio, format="%W")),  ])
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA <= format(input$fFin, format="%W")),  ])
})
output$plotCSemana <- renderPlot({
ggplot(data=comunasWeek(), aes(x=SEMANA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Semana")+
ylab("Accidentes")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
#DIA
comunaPDay <- comuna2018("DIA",99)
comunasPDay <- reactive({
comunaPDay <- comunaPDay[(comunaPDay$COMUNA == input$selectComuna), ]
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA >= input$fInicio),  ])
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA <= input$fFin),  ])
})
output$plotCDia <- renderPlot({
ggplot(data=comunasPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Día")+
ylab("Accidentes")
})
################# Barrio
#MES
barrioPred <- barrio2018("MES",99)
barrios <- reactive({
barrioPred <- barrioPred[(barrioPred$BARRIO == input$selectBarrio), ]
barrioPred <- na.omit(barrioPred[(barrioPred$MES >= format(input$fInicio, format="%m")),  ])
barrioPred <- na.omit(barrioPred[(barrioPred$MES <= format(input$fFin, format="%m")),  ])
})
output$plotBMes <- renderPlot({
ggplot(data=barrios(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Mes")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Accidentalidad en Medellín"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("grupo", "Selecciona el grupo", list("Comuna","Barrio"),"Comuna"),
conditionalPanel(
condition = "input.grupo == 'Comuna'",
selectInput("selectComuna", "Selecciona una comuna",
unique(cargarComuna()$COMUNA))
),
conditionalPanel(
condition = "input.grupo == 'Barrio'",
selectInput("selectBarrio", "Selecciona un barrio",
unique(cargarBarrio()$BARRIO))
),
radioButtons("tipo", "Selecciona el tipo", c("Mes","Semana","Día"),"Mes"),
dateInput("fInicio", "Fecha de inicio", value = "2018-01-01" ,min="2018-01-01", max="2018-12-31" ),
dateInput("fFin", "Fecha de fin", value="2018-12-31", min="2018-01-01", max="2018-12-31" )
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Comuna')",
plotOutput("plotCMes") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Semana') && (input.grupo == 'Comuna')",
plotOutput("plotCSemana") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Día') && (input.grupo == 'Comuna')",
plotOutput("plotCDia") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Mes') && (input.grupo == 'Barrio')",
plotOutput("plotBMes") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Semana') && (input.grupo == 'Barrio')",
plotOutput("plotBSemana") %>% withSpinner(color="#0dc5c1")
),
conditionalPanel(
condition = "(input.tipo == 'Día') && (input.grupo == 'Barrio')",
plotOutput("plotBDia") %>% withSpinner(color="#0dc5c1")
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
###################### Comuna
#MES
comunaPred <- comuna2018("MES",99)
comunas <- reactive({
comunaPred <- comunaPred[(comunaPred$COMUNA == input$selectComuna), ]
comunaPred <- na.omit(comunaPred[(comunaPred$MES >= format(input$fInicio, format="%m")),  ])
comunaPred <- na.omit(comunaPred[(comunaPred$MES <= format(input$fFin, format="%m")),  ])
})
output$plotCMes <- renderPlot({
ggplot(data=comunas(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Mes")+
ylab("Accidentes")
})
#Semana
comunaPWeek <- comuna2018("SEMANA",99)
comunasWeek <- reactive({
comunaPWeek <- comunaPWeek[(comunaPWeek$COMUNA == input$selectComuna), ]
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA >= format(input$fInicio, format="%W")),  ])
comunaPWeek <- na.omit(comunaPWeek[(comunaPWeek$SEMANA <= format(input$fFin, format="%W")),  ])
})
output$plotCSemana <- renderPlot({
ggplot(data=comunasWeek(), aes(x=SEMANA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Semana")+
ylab("Accidentes")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
#DIA
comunaPDay <- comuna2018("DIA",99)
comunasPDay <- reactive({
comunaPDay <- comunaPDay[(comunaPDay$COMUNA == input$selectComuna), ]
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA >= input$fInicio),  ])
comunaPDay <- na.omit(comunaPDay[(comunaPDay$FECHA <= input$fFin),  ])
})
output$plotCDia <- renderPlot({
ggplot(data=comunasPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectComuna)+
xlab("Día")+
ylab("Accidentes")
})
################# Barrio
#MES
barrioPred <- barrio2018("MES",99)
barrios <- reactive({
barrioPred <- barrioPred[(barrioPred$BARRIO == input$selectBarrio), ]
barrioPred <- na.omit(barrioPred[(barrioPred$MES >= format(input$fInicio, format="%m")),  ])
barrioPred <- na.omit(barrioPred[(barrioPred$MES <= format(input$fFin, format="%m")),  ])
})
output$plotBMes <- renderPlot({
ggplot(data=barrios(), aes(x=MES, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Mes")+
ylab("Accidentes")
})
#Semana
barrioPWeek <- barrio2018("SEMANA",99)
barriosWeek <- reactive({
barrioPWeek <- barrioPWeek[(barrioPWeek$BARRIO == input$selectBarrio), ]
barrioPWeek <- na.omit(barrioPWeek[(barrioPWeek$SEMANA >= format(input$fInicio, format="%W")),  ])
barrioPWeek <- na.omit(barrioPWeek[(barrioPWeek$SEMANA <= format(input$fFin, format="%W")),  ])
})
output$plotBSemana <- renderPlot({
ggplot(data=barriosWeek(), aes(x=SEMANA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Semana")+
ylab("Accidentes")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
#DIA
barrioPDay <- barrio2018("DIA",99)
barriosPDay <- reactive({
barrioPDay <- barrioPDay[(barrioPDay$BARRIO == input$selectBarrio), ]
barrioPDay <- na.omit(barrioPDay[(barrioPDay$FECHA >= input$fInicio),  ])
barrioPDay <- na.omit(barrioPDay[(barrioPDay$FECHA <= input$fFin),  ])
})
output$plotBDia <- renderPlot({
ggplot(data=barriosPDay(), aes(x=FECHA, y=AÑO_2018_PRED, group=1)) +
geom_line()+
geom_point()+
ggtitle(input$selectBarrio)+
xlab("Día")+
ylab("Accidentes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
